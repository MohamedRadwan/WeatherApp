{"version":3,"sources":["logo.svg","app_component/form.component.jsx","app_component/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","react_default","a","createElement","className","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","id","value","selected","Weather","city","concat","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","API_KEY","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","country","units","api_call","response","wrap","_context","prev","next","preventDefault","target","elements","Select","fetch","sent","json","console","log","setState","sys","celsius","main","temp","weather","get_WeatherIcon","stop","_x","apply","arguments","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","form_component","weather_component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f83a79d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './form.style.css';\r\nconst Form = props => {\r\n  return (\r\n    <div className='container'>\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className='row'>\r\n          <div className='col-med-3 offset-md-2'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              name='city'\r\n              autoComplete='off'\r\n              placeholder='City'\r\n            />\r\n          </div>\r\n          <div className='col-med-3'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              name='country'\r\n              autoComplete='off'\r\n              placeholder='Country'\r\n            />\r\n          </div>\r\n          <div className='col-med-3'>\r\n            <select name='Select' id='sel'>\r\n              <option value='metric' selected='selected'>\r\n                Celsius\r\n              </option>\r\n              <option value='imperial'>Fahrenheit</option>\r\n            </select>\r\n          </div>\r\n          <div className='col-med-3 mt-md-0 text-md-left offset-md-1'>\r\n            <button className='btn btn-warning'>Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nfunction error() {\r\n  return (\r\n    <div className='alert alert-danger mx-5' role='alert'>\r\n      Please Enter City and Country.\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from 'react';\r\nimport './weather.style.css';\r\nconst Weather = props => {\r\n  return (\r\n    <div className='container text-light'>\r\n      <div className='cards pt-4'>\r\n        <h1>{props.city}</h1>\r\n        <h5 className='py-4'>\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n\r\n        {props.temp_celsius ? (\r\n          <h1 className='py-2'>{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/*show max and min temp */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n        <h4 className='py-3'>{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className='px-4'>{min}&deg;</span>\r\n        <span className='px-4'>{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './app_component/form.component';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component';\n\nconst API_KEY = '813e4344d361dfdb33174b6478db88c6';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const units = e.target.elements.Select.value;\n    if (city && country) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=${units}`\n      );\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        celsius: response.main.temp,\n        temp_max: response.main.temp_max,\n        temp_min: response.main.temp_min,\n        description: response.weather[0].description,\n        error: false\n      });\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n  state = {};\n  render() {\n    return (\n      <div className='App'>\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}